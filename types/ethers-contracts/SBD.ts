/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type KnightStruct = {
  pool: PromiseOrValue<BigNumberish>;
  coin: PromiseOrValue<BigNumberish>;
  owner: PromiseOrValue<string>;
  inClan: PromiseOrValue<BigNumberish>;
  ownsClan: PromiseOrValue<BigNumberish>;
};

export type KnightStructOutput = [
  number,
  number,
  string,
  BigNumber,
  BigNumber
] & {
  pool: number;
  coin: number;
  owner: string;
  inClan: BigNumber;
  ownsClan: BigNumber;
};

export interface SBDInterface extends utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burnKnight(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getKnightClan(uint256)": FunctionFragment;
    "getKnightClanOwnerOf(uint256)": FunctionFragment;
    "getKnightCoin(uint256)": FunctionFragment;
    "getKnightInfo(uint256)": FunctionFragment;
    "getKnightOwner(uint256)": FunctionFragment;
    "getKnightPool(uint256)": FunctionFragment;
    "getKnightPrice(uint8)": FunctionFragment;
    "getKnightsBurned(uint8,uint8)": FunctionFragment;
    "getKnightsBurnedOfCoin(uint8)": FunctionFragment;
    "getKnightsBurnedOfPool(uint8)": FunctionFragment;
    "getKnightsBurnedTotal()": FunctionFragment;
    "getKnightsMinted(uint8,uint8)": FunctionFragment;
    "getKnightsMintedOfCoin(uint8)": FunctionFragment;
    "getKnightsMintedOfPool(uint8)": FunctionFragment;
    "getKnightsMintedTotal()": FunctionFragment;
    "getPoolAndCoinCompatibility(uint8,uint8)": FunctionFragment;
    "getTotalKnightSupply()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintKnight(uint8,uint8)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "battleWonBy(address,uint256)": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "getCurrentYield()": FunctionFragment;
    "getLockedYield()": FunctionFragment;
    "getStakedByKnights()": FunctionFragment;
    "getTotalYield()": FunctionFragment;
    "getUserReward(address)": FunctionFragment;
    "getYieldInfo()": FunctionFragment;
    "getDummyImplementation()": FunctionFragment;
    "setDummyImplementation(address)": FunctionFragment;
    "createGear(uint256,uint8,string)": FunctionFragment;
    "getEquipmentInSlot(uint256,uint8)": FunctionFragment;
    "getGearEquipable(address,uint256)": FunctionFragment;
    "getGearEquipable(uint256)": FunctionFragment;
    "getGearName(uint256)": FunctionFragment;
    "getGearSlotOf(uint256)": FunctionFragment;
    "updateKnightGear(uint256,uint256[])": FunctionFragment;
    "acceptJoin(uint256,uint256)": FunctionFragment;
    "acceptLeave(uint256,uint256)": FunctionFragment;
    "create(uint256)": FunctionFragment;
    "dissolve(uint256)": FunctionFragment;
    "getClanLevel(uint256)": FunctionFragment;
    "getClanLevelThresholds(uint256)": FunctionFragment;
    "getClanMaxLevel()": FunctionFragment;
    "getClanOwner(uint256)": FunctionFragment;
    "getClanStake(uint256)": FunctionFragment;
    "getClanTotalMembers(uint256)": FunctionFragment;
    "getJoinProposal(uint256)": FunctionFragment;
    "getLeaveProposal(uint256)": FunctionFragment;
    "getStakeOf(address,uint256)": FunctionFragment;
    "join(uint256,uint256)": FunctionFragment;
    "leave(uint256,uint256)": FunctionFragment;
    "onStake(address,uint256,uint256)": FunctionFragment;
    "onWithdraw(address,uint256,uint256)": FunctionFragment;
    "refuseJoin(uint256,uint256)": FunctionFragment;
    "refuseLeave(uint256,uint256)": FunctionFragment;
    "burnGear(uint256,uint256)": FunctionFragment;
    "burnGear(uint256,uint256,address)": FunctionFragment;
    "mintGear(uint256,uint256,address)": FunctionFragment;
    "mintGear(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "balanceOfBatch"
      | "burnKnight"
      | "exists(uint256)"
      | "exists(uint256)"
      | "getKnightClan"
      | "getKnightClanOwnerOf"
      | "getKnightCoin"
      | "getKnightInfo"
      | "getKnightOwner"
      | "getKnightPool"
      | "getKnightPrice"
      | "getKnightsBurned"
      | "getKnightsBurnedOfCoin"
      | "getKnightsBurnedOfPool"
      | "getKnightsBurnedTotal"
      | "getKnightsMinted"
      | "getKnightsMintedOfCoin"
      | "getKnightsMintedOfPool"
      | "getKnightsMintedTotal"
      | "getPoolAndCoinCompatibility"
      | "getTotalKnightSupply"
      | "isApprovedForAll"
      | "mintKnight"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "totalSupply"
      | "uri"
      | "battleWonBy"
      | "claimReward"
      | "getCurrentYield"
      | "getLockedYield"
      | "getStakedByKnights"
      | "getTotalYield"
      | "getUserReward"
      | "getYieldInfo"
      | "getDummyImplementation"
      | "setDummyImplementation"
      | "createGear"
      | "getEquipmentInSlot"
      | "getGearEquipable(address,uint256)"
      | "getGearEquipable(uint256)"
      | "getGearName"
      | "getGearSlotOf"
      | "updateKnightGear"
      | "acceptJoin"
      | "acceptLeave"
      | "create"
      | "dissolve"
      | "getClanLevel"
      | "getClanLevelThresholds"
      | "getClanMaxLevel"
      | "getClanOwner"
      | "getClanStake"
      | "getClanTotalMembers"
      | "getJoinProposal"
      | "getLeaveProposal"
      | "getStakeOf"
      | "join"
      | "leave"
      | "onStake"
      | "onWithdraw"
      | "refuseJoin"
      | "refuseLeave"
      | "burnGear(uint256,uint256)"
      | "burnGear(uint256,uint256,address)"
      | "mintGear(uint256,uint256,address)"
      | "mintGear(uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnKnight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightClan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightClanOwnerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightCoin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsBurned",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsBurnedOfCoin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsBurnedOfPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsBurnedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsMinted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsMintedOfCoin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsMintedOfPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnightsMintedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAndCoinCompatibility",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalKnightSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintKnight",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "battleWonBy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedByKnights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDummyImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDummyImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGear",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquipmentInSlot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGearEquipable(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGearEquipable(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGearName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGearSlotOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKnightGear",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptJoin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptLeave",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dissolve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClanLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClanLevelThresholds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClanMaxLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClanOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClanStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClanTotalMembers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getJoinProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaveProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "leave",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onStake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refuseJoin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "refuseLeave",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnGear(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnGear(uint256,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGear(uint256,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGear(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnKnight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exists(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exists(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightClan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightClanOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsBurnedOfCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsBurnedOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsBurnedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsMintedOfCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsMintedOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnightsMintedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAndCoinCompatibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalKnightSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintKnight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "battleWonBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedByKnights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDummyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDummyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEquipmentInSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearEquipable(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearEquipable(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearSlotOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKnightGear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptJoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptLeave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dissolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClanLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClanLevelThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClanMaxLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClanOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClanStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClanTotalMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJoinProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakeOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onWithdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refuseJoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refuseLeave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnGear(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnGear(uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGear(uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGear(uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "KnightBurned(uint256,address,uint8,uint8)": EventFragment;
    "KnightMinted(uint256,address,uint8,uint8)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "NewWinner(address,uint256)": EventFragment;
    "RewardClaimed(address,uint256)": EventFragment;
    "DummyUpgraded(address)": EventFragment;
    "GearCreated(uint256,uint8,string)": EventFragment;
    "GearEquipped(uint256,uint8,uint256)": EventFragment;
    "ClanCreated(uint256,uint256)": EventFragment;
    "ClanDissloved(uint256,uint256,bool)": EventFragment;
    "ClanLeveledDown(uint256,uint256)": EventFragment;
    "ClanLeveledUp(uint256,uint256)": EventFragment;
    "JoinProposalRefused(uint256,uint256)": EventFragment;
    "KnightAskedToJoin(uint256,uint256)": EventFragment;
    "KnightAskedToLeave(uint256,uint256)": EventFragment;
    "KnightJoinedClan(uint256,uint256)": EventFragment;
    "KnightLeavedClan(uint256,uint256,bool)": EventFragment;
    "LeaveProposalRefused(uint256,uint256)": EventFragment;
    "StakeAdded(address,uint256,uint256)": EventFragment;
    "StakeWithdrawn(address,uint256,uint256)": EventFragment;
    "GearBurned(uint256,uint256,address)": EventFragment;
    "GearMinted(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KnightBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KnightMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DummyUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GearCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GearEquipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClanDissloved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClanLeveledDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClanLeveledUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinProposalRefused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KnightAskedToJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KnightAskedToLeave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KnightJoinedClan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KnightLeavedClan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveProposalRefused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GearBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GearMinted"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface KnightBurnedEventObject {
  knightId: BigNumber;
  wallet: string;
  c: number;
  p: number;
}
export type KnightBurnedEvent = TypedEvent<
  [BigNumber, string, number, number],
  KnightBurnedEventObject
>;

export type KnightBurnedEventFilter = TypedEventFilter<KnightBurnedEvent>;

export interface KnightMintedEventObject {
  knightId: BigNumber;
  wallet: string;
  c: number;
  p: number;
}
export type KnightMintedEvent = TypedEvent<
  [BigNumber, string, number, number],
  KnightMintedEventObject
>;

export type KnightMintedEventFilter = TypedEventFilter<KnightMintedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface NewWinnerEventObject {
  user: string;
  reward: BigNumber;
}
export type NewWinnerEvent = TypedEvent<
  [string, BigNumber],
  NewWinnerEventObject
>;

export type NewWinnerEventFilter = TypedEventFilter<NewWinnerEvent>;

export interface RewardClaimedEventObject {
  user: string;
  reward: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface DummyUpgradedEventObject {
  newImplementation: string;
}
export type DummyUpgradedEvent = TypedEvent<[string], DummyUpgradedEventObject>;

export type DummyUpgradedEventFilter = TypedEventFilter<DummyUpgradedEvent>;

export interface GearCreatedEventObject {
  id: BigNumber;
  slot: number;
  name: string;
}
export type GearCreatedEvent = TypedEvent<
  [BigNumber, number, string],
  GearCreatedEventObject
>;

export type GearCreatedEventFilter = TypedEventFilter<GearCreatedEvent>;

export interface GearEquippedEventObject {
  knightId: BigNumber;
  slot: number;
  itemId: BigNumber;
}
export type GearEquippedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  GearEquippedEventObject
>;

export type GearEquippedEventFilter = TypedEventFilter<GearEquippedEvent>;

export interface ClanCreatedEventObject {
  clanId: BigNumber;
  charId: BigNumber;
}
export type ClanCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ClanCreatedEventObject
>;

export type ClanCreatedEventFilter = TypedEventFilter<ClanCreatedEvent>;

export interface ClanDisslovedEventObject {
  clanId: BigNumber;
  charId: BigNumber;
  ownerBurned: boolean;
}
export type ClanDisslovedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  ClanDisslovedEventObject
>;

export type ClanDisslovedEventFilter = TypedEventFilter<ClanDisslovedEvent>;

export interface ClanLeveledDownEventObject {
  clanId: BigNumber;
  newLevel: BigNumber;
}
export type ClanLeveledDownEvent = TypedEvent<
  [BigNumber, BigNumber],
  ClanLeveledDownEventObject
>;

export type ClanLeveledDownEventFilter = TypedEventFilter<ClanLeveledDownEvent>;

export interface ClanLeveledUpEventObject {
  clanId: BigNumber;
  newLevel: BigNumber;
}
export type ClanLeveledUpEvent = TypedEvent<
  [BigNumber, BigNumber],
  ClanLeveledUpEventObject
>;

export type ClanLeveledUpEventFilter = TypedEventFilter<ClanLeveledUpEvent>;

export interface JoinProposalRefusedEventObject {
  clanId: BigNumber;
  charId: BigNumber;
}
export type JoinProposalRefusedEvent = TypedEvent<
  [BigNumber, BigNumber],
  JoinProposalRefusedEventObject
>;

export type JoinProposalRefusedEventFilter =
  TypedEventFilter<JoinProposalRefusedEvent>;

export interface KnightAskedToJoinEventObject {
  clanId: BigNumber;
  charId: BigNumber;
}
export type KnightAskedToJoinEvent = TypedEvent<
  [BigNumber, BigNumber],
  KnightAskedToJoinEventObject
>;

export type KnightAskedToJoinEventFilter =
  TypedEventFilter<KnightAskedToJoinEvent>;

export interface KnightAskedToLeaveEventObject {
  clanId: BigNumber;
  charId: BigNumber;
}
export type KnightAskedToLeaveEvent = TypedEvent<
  [BigNumber, BigNumber],
  KnightAskedToLeaveEventObject
>;

export type KnightAskedToLeaveEventFilter =
  TypedEventFilter<KnightAskedToLeaveEvent>;

export interface KnightJoinedClanEventObject {
  clanId: BigNumber;
  charId: BigNumber;
}
export type KnightJoinedClanEvent = TypedEvent<
  [BigNumber, BigNumber],
  KnightJoinedClanEventObject
>;

export type KnightJoinedClanEventFilter =
  TypedEventFilter<KnightJoinedClanEvent>;

export interface KnightLeavedClanEventObject {
  clanId: BigNumber;
  charId: BigNumber;
  knightBurned: boolean;
}
export type KnightLeavedClanEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  KnightLeavedClanEventObject
>;

export type KnightLeavedClanEventFilter =
  TypedEventFilter<KnightLeavedClanEvent>;

export interface LeaveProposalRefusedEventObject {
  clanId: BigNumber;
  charId: BigNumber;
}
export type LeaveProposalRefusedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LeaveProposalRefusedEventObject
>;

export type LeaveProposalRefusedEventFilter =
  TypedEventFilter<LeaveProposalRefusedEvent>;

export interface StakeAddedEventObject {
  benefactor: string;
  clanId: BigNumber;
  amount: BigNumber;
}
export type StakeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeAddedEventObject
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export interface StakeWithdrawnEventObject {
  benefactor: string;
  clanId: BigNumber;
  amount: BigNumber;
}
export type StakeWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeWithdrawnEventObject
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export interface GearBurnedEventObject {
  id: BigNumber;
  amount: BigNumber;
  from: string;
}
export type GearBurnedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  GearBurnedEventObject
>;

export type GearBurnedEventFilter = TypedEventFilter<GearBurnedEvent>;

export interface GearMintedEventObject {
  id: BigNumber;
  amount: BigNumber;
  to: string;
}
export type GearMintedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  GearMintedEventObject
>;

export type GearMintedEventFilter = TypedEventFilter<GearMintedEvent>;

export interface SBD extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SBDInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burnKnight(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getKnightClan(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightClanOwnerOf(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightCoin(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getKnightInfo(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[KnightStructOutput]>;

    getKnightOwner(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getKnightPool(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getKnightPrice(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightsBurned(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightsBurnedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightsBurnedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { knightsBurnedTotal: BigNumber }>;

    getKnightsBurnedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getKnightsMinted(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightsMintedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKnightsMintedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { knightsMintedTotal: BigNumber }>;

    getKnightsMintedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolAndCoinCompatibility(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTotalKnightSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintKnight(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    battleWonBy(
      user: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLockedYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakedByKnights(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserReward(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYieldInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getDummyImplementation(overrides?: CallOverrides): Promise<[string]>;

    setDummyImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGear(
      id: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEquipmentInSlot(
      knightId: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGearEquipable(address,uint256)"(
      account: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGearEquipable(uint256)"(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGearName(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGearSlotOf(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    updateKnightGear(
      knightId: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dissolve(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClanLevel(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClanLevelThresholds(
      newLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClanMaxLevel(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClanOwner(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClanStake(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClanTotalMembers(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getJoinProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLeaveProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeOf(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    join(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onStake(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onWithdraw(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refuseJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refuseLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burnGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burnGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burnKnight(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exists(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getKnightClan(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightClanOwnerOf(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightCoin(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getKnightInfo(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<KnightStructOutput>;

  getKnightOwner(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getKnightPool(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getKnightPrice(
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsBurned(
    pool: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsBurnedOfCoin(
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsBurnedOfPool(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsBurnedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  getKnightsMinted(
    pool: PromiseOrValue<BigNumberish>,
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsMintedOfCoin(
    coin: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsMintedOfPool(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnightsMintedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolAndCoinCompatibility(
    p: PromiseOrValue<BigNumberish>,
    c: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTotalKnightSupply(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintKnight(
    p: PromiseOrValue<BigNumberish>,
    c: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uri(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  battleWonBy(
    user: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentYield(overrides?: CallOverrides): Promise<BigNumber>;

  getLockedYield(overrides?: CallOverrides): Promise<BigNumber>;

  getStakedByKnights(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalYield(overrides?: CallOverrides): Promise<BigNumber>;

  getUserReward(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYieldInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getDummyImplementation(overrides?: CallOverrides): Promise<string>;

  setDummyImplementation(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGear(
    id: PromiseOrValue<BigNumberish>,
    slot: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEquipmentInSlot(
    knightId: PromiseOrValue<BigNumberish>,
    slot: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGearEquipable(address,uint256)"(
    account: PromiseOrValue<string>,
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGearEquipable(uint256)"(
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGearName(
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGearSlotOf(
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  updateKnightGear(
    knightId: PromiseOrValue<BigNumberish>,
    items: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptJoin(
    knightId: PromiseOrValue<BigNumberish>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptLeave(
    knightId: PromiseOrValue<BigNumberish>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dissolve(
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClanLevel(
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClanLevelThresholds(
    newLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClanMaxLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getClanOwner(
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClanStake(
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClanTotalMembers(
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getJoinProposal(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLeaveProposal(
    knightId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeOf(
    benefactor: PromiseOrValue<string>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  join(
    knightId: PromiseOrValue<BigNumberish>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leave(
    knightId: PromiseOrValue<BigNumberish>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onStake(
    benefactor: PromiseOrValue<string>,
    clanId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onWithdraw(
    benefactor: PromiseOrValue<string>,
    clanId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refuseJoin(
    knightId: PromiseOrValue<BigNumberish>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refuseLeave(
    knightId: PromiseOrValue<BigNumberish>,
    clanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burnGear(uint256,uint256)"(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burnGear(uint256,uint256,address)"(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintGear(uint256,uint256,address)"(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintGear(uint256,uint256)"(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burnKnight(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getKnightClan(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightClanOwnerOf(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightCoin(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getKnightInfo(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<KnightStructOutput>;

    getKnightOwner(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getKnightPool(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getKnightPrice(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurned(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurnedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurnedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurnedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getKnightsMinted(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsMintedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsMintedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsMintedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAndCoinCompatibility(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTotalKnightSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintKnight(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    battleWonBy(
      user: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentYield(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedYield(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedByKnights(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalYield(overrides?: CallOverrides): Promise<BigNumber>;

    getUserReward(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getDummyImplementation(overrides?: CallOverrides): Promise<string>;

    setDummyImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGear(
      id: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEquipmentInSlot(
      knightId: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGearEquipable(address,uint256)"(
      account: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGearEquipable(uint256)"(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGearName(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGearSlotOf(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    updateKnightGear(
      knightId: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dissolve(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getClanLevel(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanLevelThresholds(
      newLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanMaxLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getClanOwner(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanStake(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanTotalMembers(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJoinProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLeaveProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeOf(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    join(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    leave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onStake(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onWithdraw(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refuseJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refuseLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "KnightBurned(uint256,address,uint8,uint8)"(
      knightId?: null,
      wallet?: null,
      c?: null,
      p?: null
    ): KnightBurnedEventFilter;
    KnightBurned(
      knightId?: null,
      wallet?: null,
      c?: null,
      p?: null
    ): KnightBurnedEventFilter;

    "KnightMinted(uint256,address,uint8,uint8)"(
      knightId?: null,
      wallet?: null,
      c?: null,
      p?: null
    ): KnightMintedEventFilter;
    KnightMinted(
      knightId?: null,
      wallet?: null,
      c?: null,
      p?: null
    ): KnightMintedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    "NewWinner(address,uint256)"(
      user?: null,
      reward?: null
    ): NewWinnerEventFilter;
    NewWinner(user?: null, reward?: null): NewWinnerEventFilter;

    "RewardClaimed(address,uint256)"(
      user?: null,
      reward?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(user?: null, reward?: null): RewardClaimedEventFilter;

    "DummyUpgraded(address)"(
      newImplementation?: null
    ): DummyUpgradedEventFilter;
    DummyUpgraded(newImplementation?: null): DummyUpgradedEventFilter;

    "GearCreated(uint256,uint8,string)"(
      id?: null,
      slot?: null,
      name?: null
    ): GearCreatedEventFilter;
    GearCreated(id?: null, slot?: null, name?: null): GearCreatedEventFilter;

    "GearEquipped(uint256,uint8,uint256)"(
      knightId?: null,
      slot?: null,
      itemId?: null
    ): GearEquippedEventFilter;
    GearEquipped(
      knightId?: null,
      slot?: null,
      itemId?: null
    ): GearEquippedEventFilter;

    "ClanCreated(uint256,uint256)"(
      clanId?: null,
      charId?: null
    ): ClanCreatedEventFilter;
    ClanCreated(clanId?: null, charId?: null): ClanCreatedEventFilter;

    "ClanDissloved(uint256,uint256,bool)"(
      clanId?: null,
      charId?: null,
      ownerBurned?: null
    ): ClanDisslovedEventFilter;
    ClanDissloved(
      clanId?: null,
      charId?: null,
      ownerBurned?: null
    ): ClanDisslovedEventFilter;

    "ClanLeveledDown(uint256,uint256)"(
      clanId?: null,
      newLevel?: null
    ): ClanLeveledDownEventFilter;
    ClanLeveledDown(clanId?: null, newLevel?: null): ClanLeveledDownEventFilter;

    "ClanLeveledUp(uint256,uint256)"(
      clanId?: null,
      newLevel?: null
    ): ClanLeveledUpEventFilter;
    ClanLeveledUp(clanId?: null, newLevel?: null): ClanLeveledUpEventFilter;

    "JoinProposalRefused(uint256,uint256)"(
      clanId?: null,
      charId?: null
    ): JoinProposalRefusedEventFilter;
    JoinProposalRefused(
      clanId?: null,
      charId?: null
    ): JoinProposalRefusedEventFilter;

    "KnightAskedToJoin(uint256,uint256)"(
      clanId?: null,
      charId?: null
    ): KnightAskedToJoinEventFilter;
    KnightAskedToJoin(
      clanId?: null,
      charId?: null
    ): KnightAskedToJoinEventFilter;

    "KnightAskedToLeave(uint256,uint256)"(
      clanId?: null,
      charId?: null
    ): KnightAskedToLeaveEventFilter;
    KnightAskedToLeave(
      clanId?: null,
      charId?: null
    ): KnightAskedToLeaveEventFilter;

    "KnightJoinedClan(uint256,uint256)"(
      clanId?: null,
      charId?: null
    ): KnightJoinedClanEventFilter;
    KnightJoinedClan(clanId?: null, charId?: null): KnightJoinedClanEventFilter;

    "KnightLeavedClan(uint256,uint256,bool)"(
      clanId?: null,
      charId?: null,
      knightBurned?: null
    ): KnightLeavedClanEventFilter;
    KnightLeavedClan(
      clanId?: null,
      charId?: null,
      knightBurned?: null
    ): KnightLeavedClanEventFilter;

    "LeaveProposalRefused(uint256,uint256)"(
      clanId?: null,
      charId?: null
    ): LeaveProposalRefusedEventFilter;
    LeaveProposalRefused(
      clanId?: null,
      charId?: null
    ): LeaveProposalRefusedEventFilter;

    "StakeAdded(address,uint256,uint256)"(
      benefactor?: null,
      clanId?: null,
      amount?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      benefactor?: null,
      clanId?: null,
      amount?: null
    ): StakeAddedEventFilter;

    "StakeWithdrawn(address,uint256,uint256)"(
      benefactor?: null,
      clanId?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      benefactor?: null,
      clanId?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;

    "GearBurned(uint256,uint256,address)"(
      id?: null,
      amount?: null,
      from?: null
    ): GearBurnedEventFilter;
    GearBurned(id?: null, amount?: null, from?: null): GearBurnedEventFilter;

    "GearMinted(uint256,uint256,address)"(
      id?: null,
      amount?: null,
      to?: null
    ): GearMintedEventFilter;
    GearMinted(id?: null, amount?: null, to?: null): GearMintedEventFilter;
  };

  estimateGas: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnKnight(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightClan(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightClanOwnerOf(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightCoin(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightInfo(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightOwner(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightPool(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightPrice(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurned(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurnedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurnedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsBurnedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getKnightsMinted(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsMintedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsMintedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnightsMintedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAndCoinCompatibility(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalKnightSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintKnight(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    battleWonBy(
      user: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentYield(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedYield(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedByKnights(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalYield(overrides?: CallOverrides): Promise<BigNumber>;

    getUserReward(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getDummyImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    setDummyImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGear(
      id: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEquipmentInSlot(
      knightId: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGearEquipable(address,uint256)"(
      account: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGearEquipable(uint256)"(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGearName(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGearSlotOf(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateKnightGear(
      knightId: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dissolve(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClanLevel(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanLevelThresholds(
      newLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanMaxLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getClanOwner(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanStake(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanTotalMembers(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJoinProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLeaveProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeOf(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    join(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onStake(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onWithdraw(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refuseJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refuseLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burnGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burnGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnKnight(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightClan(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightClanOwnerOf(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightCoin(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightInfo(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightOwner(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightPool(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightPrice(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsBurned(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsBurnedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsBurnedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsBurnedTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsMinted(
      pool: PromiseOrValue<BigNumberish>,
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsMintedOfCoin(
      coin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsMintedOfPool(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnightsMintedTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAndCoinCompatibility(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalKnightSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintKnight(
      p: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    battleWonBy(
      user: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockedYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedByKnights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserReward(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDummyImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDummyImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGear(
      id: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEquipmentInSlot(
      knightId: PromiseOrValue<BigNumberish>,
      slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGearEquipable(address,uint256)"(
      account: PromiseOrValue<string>,
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGearEquipable(uint256)"(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGearName(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGearSlotOf(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateKnightGear(
      knightId: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dissolve(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClanLevel(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClanLevelThresholds(
      newLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClanMaxLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClanOwner(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClanStake(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClanTotalMembers(
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJoinProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLeaveProposal(
      knightId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeOf(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    join(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onStake(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onWithdraw(
      benefactor: PromiseOrValue<string>,
      clanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refuseJoin(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refuseLeave(
      knightId: PromiseOrValue<BigNumberish>,
      clanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burnGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burnGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintGear(uint256,uint256,address)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintGear(uint256,uint256)"(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
